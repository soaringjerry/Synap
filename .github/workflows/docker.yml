name: Docker (GHCR)
run-name: ${{ github.event_name == 'pull_request' && format('PR #{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) || github.event.head_commit.message || format('{0} #{1}', github.workflow, github.run_number) }}

on:
  push:
    branches: [main]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build vars
        id: vars
        run: |
          echo "sha_short=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Set lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/synap-backend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short

      - name: Build and push backend (amd64 only)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          build-args: |
            GIT_SHA=${{ steps.vars.outputs.sha_short }}
            BUILD_TIME=${{ steps.vars.outputs.build_time }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker meta (fullstack)
        id: meta_full
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/synap
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short

      - name: Build and push fullstack (amd64)
        if: ${{ hashFiles('frontend/package.json') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.fullstack
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_full.outputs.tags }}
          labels: ${{ steps.meta_full.outputs.labels }}
          build-args: |
            GIT_SHA=${{ steps.vars.outputs.sha_short }}
            BUILD_TIME=${{ steps.vars.outputs.build_time }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker meta (dev)
        id: meta_dev
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/synap-dev
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push dev image (amd64)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.dev
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_dev.outputs.tags }}
          labels: ${{ steps.meta_dev.outputs.labels }}
          build-args: |
            GIT_SHA=${{ steps.vars.outputs.sha_short }}
            BUILD_TIME=${{ steps.vars.outputs.build_time }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
